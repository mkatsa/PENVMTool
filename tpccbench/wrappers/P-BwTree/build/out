[ 40%] Built target Indexes
Scanning dependencies of target pbwtree_wrapper
[ 60%] Building CXX object CMakeFiles/pbwtree_wrapper.dir/pbwtree_wrapper.cpp.o
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:131:1: warning: multi-line comment [-Wcomment]
  131 | // #define bwt_printf(fmt, ...)                              \
      | ^
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:70,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In member function ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&)’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In member function ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&)’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:2,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h: In member function ‘virtual void TreeApi::insert(const void*, const void*)’:
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:48:37: warning: unused parameter ‘Nkey’ [-Wunused-parameter]
   48 |     virtual void insert(const void *Nkey, const void *Nvalue) {};
      |                         ~~~~~~~~~~~~^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:48:55: warning: unused parameter ‘Nvalue’ [-Wunused-parameter]
   48 |     virtual void insert(const void *Nkey, const void *Nvalue) {};
      |                                           ~~~~~~~~~~~~^~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h: In member function ‘virtual bool TreeApi::find(const void*, void*) const’:
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:50:35: warning: unused parameter ‘key’ [-Wunused-parameter]
   50 |     virtual bool find(const void *key, void *value = nullptr) const { return 0; };
      |                       ~~~~~~~~~~~~^~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:50:46: warning: unused parameter ‘value’ [-Wunused-parameter]
   50 |     virtual bool find(const void *key, void *value = nullptr) const { return 0; };
      |                                        ~~~~~~^~~~~~~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h: In member function ‘virtual bool TreeApi::remove(const void*)’:
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:51:37: warning: unused parameter ‘key’ [-Wunused-parameter]
   51 |     virtual bool remove(const void *key) {return 0;};
      |                         ~~~~~~~~~~~~^~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h: In member function ‘virtual bool TreeApi::findLastLessThan(const void*, void*, void*) const’:
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:52:47: warning: unused parameter ‘key’ [-Wunused-parameter]
   52 |     virtual bool findLastLessThan(const void *key, void *value = nullptr, void *out_key = nullptr) const {return 0;};
      |                                   ~~~~~~~~~~~~^~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:52:58: warning: unused parameter ‘value’ [-Wunused-parameter]
   52 |     virtual bool findLastLessThan(const void *key, void *value = nullptr, void *out_key = nullptr) const {return 0;};
      |                                                    ~~~~~~^~~~~~~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/../../include/tree_api.h:52:81: warning: unused parameter ‘out_key’ [-Wunused-parameter]
   52 |     virtual bool findLastLessThan(const void *key, void *value = nullptr, void *out_key = nullptr) const {return 0;};
      |                                                                           ~~~~~~^~~~~~~~~~~~~~~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp: In member function ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const’:
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:106:11: error: assignment of read-only location ‘((const bwtree_wrapper<KEY, VALUE>*)this)->bwtree_wrapper<KEY, VALUE>::nfinds’
  106 |     nfinds+=1;
      |     ~~~~~~^~~
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp: In member function ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const’:
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:137:11: error: assignment of read-only location ‘((const bwtree_wrapper<KEY, VALUE>*)this)->bwtree_wrapper<KEY, VALUE>::nscans’
  137 |     nscans+=1;
      |     ~~~~~~^~~
In file included from /usr/include/strings.h:23,
                 from /usr/include/string.h:432,
                 from /usr/include/c++/9/cstring:42,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:24,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:70,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, OrderLine*>; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, OrderLine*>; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::ElasticNode<std::pair<int, OrderLine*> >’ is conditionally-supported [-Winvalid-offsetof]
 2378 |       static constexpr size_t low_key_offset = offsetof(ElasticNode, low_key);
      |                                                         ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<long int, Order*>; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<long int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<long int, Order*>; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<long int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::ElasticNode<std::pair<long int, Order*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, Order*>; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, Order*>; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::ElasticNode<std::pair<int, Order*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, Customer*>; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, Customer*>; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::ElasticNode<std::pair<int, Customer*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, District*>; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, District*>; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::ElasticNode<std::pair<int, District*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, Stock*>; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, Stock*>; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::ElasticNode<std::pair<int, Stock*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, Warehouse*>; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2409:48:   required from ‘static void* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::InlineAllocate(const KeyNodeIDPair*, size_t) [with ElementType = std::pair<int, Warehouse*>; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>; size_t = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7791:9:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::ElasticNode<std::pair<int, Warehouse*> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<long int, long unsigned int>; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<long int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<long int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::ElasticNode<std::pair<long int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘static wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::GetNodeHeader(const KeyNodeIDPair*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyNodeIDPair = std::pair<int, long unsigned int>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3770:31:   required from ‘NodeID wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateInnerNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3447:14:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2378:57: warning: offsetof within non-standard-layout type ‘wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::ElasticNode<std::pair<int, long unsigned int> >’ is conditionally-supported [-Winvalid-offsetof]
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:70,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = OrderLine*; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = OrderLine*; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = OrderLine*; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = OrderLine*; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = Order*; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = Order*; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = Order*; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = Order*; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = Customer*; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = Customer*; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = Customer*; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = Customer*; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = District*; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = District*; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = District*; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = District*; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = Stock*; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = Stock*; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = Stock*; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = Stock*; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = Warehouse*; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = Warehouse*; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4495:58:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = Warehouse*; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = Warehouse*; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:4522:17:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NavigateLeafNode(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5971:9:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::TraverseReadOptimized(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, std::vector<ValueType>*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8063:5:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::GetValue(const KeyType&, std::vector<ValueType>&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:111:5:   required from ‘bool bwtree_wrapper<KEY, VALUE>::find(const void*, void*) const [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:104:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, OrderLine*>; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, OrderLine*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, OrderLine*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<long int, Order*>; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<long int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<long int, Order*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<long int, Order*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<long int, long unsigned int>; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<long int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<long int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<long int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, Order*>; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, Order*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, Order*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, Customer*>; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, Customer*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, Customer*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, District*>; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, District*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, District*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, Stock*>; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, Stock*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, Stock*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, Warehouse*>; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2673:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode::GetSplitSibling(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*) const [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6844:25:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, Warehouse*>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, Warehouse*>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In instantiation of ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ElasticNode<ElementType>::PushBack(const ElementType*, const ElementType*) [with ElementType = std::pair<int, long unsigned int>; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2504:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::InnerNode::GetSplitSibling() const [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7004:26:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::AdjustNodeSize(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5605:6:   required from ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LoadNodeID(NodeID, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; NodeID = long unsigned int]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:3424:18:   required from ‘const KeyValuePair* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Traverse(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*, const ValueType*, std::pair<int, bool>*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePair = std::pair<int, Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:7759:36:   required from ‘bool wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Insert(const KeyType&, const ValueType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:100:5:   required from ‘void bwtree_wrapper<KEY, VALUE>::insert(const void*, const void*) [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:94:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:2305:20: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair<int, long unsigned int>’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
 2305 |         std::memcpy(End(), copy_start_p, diff);
      |         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/9/utility:70,
                 from /usr/include/c++/9/algorithm:60,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:28,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/usr/include/c++/9/bits/stl_pair.h:208:12: note: ‘struct std::pair<int, long unsigned int>’ declared here
  208 |     struct pair
      |            ^~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:70,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, OrderLine*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, OrderLine*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*)> >; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, OrderLine*>, wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, OrderLine*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, OrderLine*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::LeafDataNode*)> >; KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, OrderLine*>, wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, OrderLine*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<OrderLine*>, std::hash<OrderLine*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = OrderLine*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<long int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<long int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)> >; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<long int, Order*>, wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<long int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<long int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)> >; KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<long int, Order*>, wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<long int, Order*, std::less<long int>, std::equal_to<long int>, std::hash<long int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = long int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)> >; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Order*>, wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, Order*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::LeafDataNode*)> >; KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Order*>, wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Order*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Order*>, std::hash<Order*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Order*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, Customer*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, Customer*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*)> >; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Customer*>, wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, Customer*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, Customer*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::LeafDataNode*)> >; KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Customer*>, wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Customer*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Customer*>, std::hash<Customer*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Customer*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, District*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, District*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*)> >; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, District*>, wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, District*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, District*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::LeafDataNode*)> >; KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, District*>, wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, District*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<District*>, std::hash<District*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = District*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, Stock*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, Stock*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*)> >; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Stock*>, wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, Stock*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, Stock*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::LeafDataNode*)> >; KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Stock*>, wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Stock*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Stock*>, std::hash<Stock*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Stock*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__ExistsScalar(const ValueType&) [with ValueType = std::pair<int, Warehouse*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:196:12:   required from ‘bool BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Exists(const ValueType&) [with ValueType = std::pair<int, Warehouse*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5247:52:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*)> >; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Warehouse*>, wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:173:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  173 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h: In instantiation of ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::__InsertScalar(const ValueType&) [with ValueType = std::pair<int, Warehouse*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:155:5:   required from ‘void BloomFilter<ValueType, ValueEqualityChecker, ValueHashFunc>::Insert(const ValueType&) [with ValueType = std::pair<int, Warehouse*>; ValueEqualityChecker = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker; ValueHashFunc = wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5248:13:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeafRecursive(const wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::BaseNode*, T&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter&, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) const [with T = SortedSmallSet<const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*)>, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]::<lambda(const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*, const wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::LeafDataNode*)> >; KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>; wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::KeyValuePairBloomFilter = BloomFilter<std::pair<int, Warehouse*>, wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairEqualityChecker, wangziqi2013::bwtree::BwTree<int, Warehouse*, std::less<int>, std::equal_to<int>, std::hash<int>, std::equal_to<Warehouse*>, std::hash<Warehouse*> >::KeyValuePairHashFunc>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:5084:5:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode* wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::CollectAllValuesOnLeaf(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::NodeSnapshot*, wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::LeafNode*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9638:19:   required from ‘void wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::LowerBound(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:9244:7:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator::ForwardIterator(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>*, const KeyType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:8947:43:   required from ‘wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::ForwardIterator wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Begin(const KeyType&) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:151:10:   required from ‘bool bwtree_wrapper<KEY, VALUE>::findLastLessThan(const void*, void*, void*) const [with KEY = int; VALUE = Warehouse*]’
/home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:134:6:   required from here
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bloom_filter.h:138:21: warning: ISO C++17 does not allow ‘register’ storage class specifier [-Wregister]
  138 |     register size_t hash_value = value_hash_obj(value);
      |                     ^~~~~~~~~~
In file included from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.hpp:1,
                 from /home/kskov/tpccbench/wrappers/P-BwTree/pbwtree_wrapper.cpp:1:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Warehouse*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Warehouse*>; ValueHashFunc = std::hash<Warehouse*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Stock*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Stock*>; ValueHashFunc = std::hash<Stock*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = District*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<District*>; ValueHashFunc = std::hash<District*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Customer*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Customer*>; ValueHashFunc = std::hash<Customer*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = Order*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = int; ValueType = OrderLine*; KeyComparator = std::less<int>; KeyEqualityChecker = std::equal_to<int>; KeyHashFunc = std::hash<int>; ValueEqualityChecker = std::equal_to<OrderLine*>; ValueHashFunc = std::hash<OrderLine*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h: In member function ‘int wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::FinishPartialSMO(wangziqi2013::bwtree::BwTree<KeyType, ValueType, KeyComparator, KeyEqualityChecker, KeyHashFunc, ValueEqualityChecker, ValueHashFunc>::Context*) [with KeyType = long int; ValueType = Order*; KeyComparator = std::less<long int>; KeyEqualityChecker = std::equal_to<long int>; KeyHashFunc = std::hash<long int>; ValueEqualityChecker = std::equal_to<Order*>; ValueHashFunc = std::hash<Order*>]’:
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6306:10: warning: this statement may fall through [-Wimplicit-fallthrough=]
 6306 |          } // if ret == true
      |          ^
/home/kskov/tpccbench/wrappers/P-BwTree/P-BwTree/src/bwtree.h:6321:7: note: here
 6321 |       case NodeType::InnerMergeType:
      |       ^~~~
make[2]: *** [CMakeFiles/pbwtree_wrapper.dir/build.make:63: CMakeFiles/pbwtree_wrapper.dir/pbwtree_wrapper.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:105: CMakeFiles/pbwtree_wrapper.dir/all] Error 2
make: *** [Makefile:84: all] Error 2
